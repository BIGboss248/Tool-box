services:
  traefik:
    #* Traefik ignores starting or unhealthy containers by default
    image: traefik
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--accesslog"
      - "--ping"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"

      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addrouterslabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      - "--certificatesResolvers.myresolver.acme.storage=acme.json"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=postmaster@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

      - --certificatesresolvers.cloudflare_resolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare_resolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.cloudflare_resolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53

      - "--experimental.plugins.bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
      - "--experimental.plugins.bouncer.version=v1.3.0"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik_logs:/var/log/traefik"
      - /etc/localtime:/etc/localtime:ro
      - ./letsencrypt:/letsencrypt:rw
      # - ./traefik.yml:/traefik.yml:ro
      # - './ban.html:/ban.html:ro'
      # - './captcha.html:/captcha.html:ro'
      # - ./data/config.yml:/config.yml:ro
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 8082:8082 # metrics port /metrics
    depends_on:
      - crowdsec
        # condition: service_healthy
    environment:
      - CF_API_EMAIL=
      - CF_DNS_API_TOKEN=
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      my_network:

  crowdsec:
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    hostname: crowdsec
    restart: unless-stopped
    environment:
      COLLECTIONS: crowdsecurity/traefik crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules
      CUSTOM_HOSTNAME: crowdsec
      # We need to register one api key per service we will use
      #* sudo docker exec crowdsec cscli bouncers add crowdsecBouncer
      BOUNCER_KEY_TRAEFIK: "LAPI-KEY"
    expose:
      - 8080
    volumes:
      - ./traefik_logs:/var/log/traefik:ro
      - ./crowdsec-db:/var/lib/crowdsec/data/
      - ./crowdsec-config:/etc/crowdsec/
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD", "cscli metrics"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s
    networks:
      my_network:

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus_config:/etc/prometheus/
      - ./prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      my_network:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s

networks:
  my_network:
    driver: bridge
    name: my_network
