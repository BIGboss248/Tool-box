#kics-scan disable=d6355c88-1e8d-49e9-b2f2-f8a1ca12c75b,1c1325ff-831d-43a1-973e-839ae57dfcc0
services:
  traefik:
    #* Traefik ignores starting or unhealthy containers by default
    # The official v3 Traefik docker image
    image: traefik
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # Enable Health check
      - "--ping=true"
      # Allow Dashboard
      - "--api.insecure=true"

      # Get config from docker lables
      - "--providers.docker"

      # Set log level
      - "--log.level=INFO"

      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Observability with Prometheus
      # If using a dedicated metrics entry point, define it:
      - "--entrypoints.metrics.address=:8082"
      # ... other command arguments ...
      - "--metrics.prometheus=true"
      # Optionally change the entry point metrics are exposed on (defaults to 'traefik')
      - "--metrics.prometheus.entrypoint=metrics"
      # Add labels to metrics for routers/services (can increase cardinality)
      - "--metrics.prometheus.addrouterslabels=true"
      - "--metrics.prometheus.addserviceslabels=true"

      # Enable access logs
      # ... other command arguments ...
      - "--accesslog=true" # Enable access logs to stdout

      # Optionally change format or output file (requires volume)
      - "--accesslog.format=json"
      - "--accesslog.filepath=./logs/access.log"

      # Optionally filter logs
      # - "--accesslog.filters.statuscodes=400-599"

      # Certificates resolvers
      ## myresolver is used for http challenge
      - "--certificatesresolvers.myresolver.acme.email=${acme_email}"
      - "--certificatesresolvers.myresolver.acme.storage=acme.json"
      # - "--certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory" # staging
      # used during the challenge
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      ## cloudflare_resolver is used for dns challenge
      - "--certificatesresolvers.cloudflare_resolver.acme.email=${acme_email}"
      - "--certificatesresolvers.cloudflare_resolver.acme.storage=acme.json"
      - "--certificatesresolvers.cloudflare_resolver.acme.dnsChallenge.provider=cloudflare"
      # - "--certificatesresolvers.cloudflare_resolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory" # staging

    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - :8080
      # The HTTPS port
      - "443:443"
      # Prometheus port
      - "8082:8082"
    environment:
      Domain: ${Domain}
      CF_API_EMAIL: ${cf_email}
      CF_DNS_API_TOKEN: ${cf_api_token}
      CF_ZONE_API_TOKEN: ${cf_api_token}
      acme_email: ${acme_email}
      # CF_DNS_API_TOKEN_FILE: /run/secrets/cf_api_token # note using _FILE for docker secrets
      #// CLOUDFLARE_API_KEY: ${cf_api_token}
      #// CLOUDFLARE_EMAIL: ${cf_email}
      #// CF_API_KEY: ${cf_api_token}
    env_file: .env # use .env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #// - ./traefik.yml:/traefik.yml:ro
      - ./acme.json:/acme.json:rw
      - ./logs:/logs
      #// - ./data/config.yml:/config.yml:ro
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 3s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.rule=Host(`${Domain}`)"
      - "traefik.http.routers.traefik-secure.tls=true"
      - "traefik.http.routers.traefik-secure.entrypoints=websecure"
      - "traefik.http.routers.traefik-secure.rule=Host(`${Domain}`)"
      - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare_resolver"
      # To enable dns challenge and wild card certificate comment above and uncommect below
      # - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
      # - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.${Domain}"
      - "traefik.http.routers.traefik-secure.tls.domains[0].main=${Domain}"
      - "traefik.http.routers.traefik-secure.service=api@internal"
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
    name: my_network
